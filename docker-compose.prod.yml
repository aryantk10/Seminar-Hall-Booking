version: '3.8'

services:
  # Frontend Application
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY}-frontend:latest
    container_name: seminar-hall-frontend-prod
    restart: unless-stopped
    ports:
      - "80:9002"
      - "443:9002"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL:-http://localhost:5000/api}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9002"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY}-backend:latest
    container_name: seminar-hall-backend-prod
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=5000
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: seminar-hall-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  # Redis for session management (optional)
  redis:
    image: redis:7-alpine
    container_name: seminar-hall-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
