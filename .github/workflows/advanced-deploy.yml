name: Advanced Deployment Pipeline

on:
  workflow_run:
    workflows: ["Enhanced CI/CD Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  # Job 1: Pre-deployment checks
  pre-deploy:
    runs-on: ubuntu-latest
    name: Pre-deployment Checks
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      deploy-version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get deployment version
      id: version
      run: |
        if [ "${{ inputs.rollback }}" == "true" ]; then
          # Get previous version for rollback
          VERSION=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "latest")
        else
          VERSION=${{ github.sha }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Deploying version: $VERSION"

    - name: Check deployment readiness
      id: check
      run: |
        # Check if images exist in registry
        docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.version.outputs.version }} > /dev/null 2>&1
        FRONTEND_EXISTS=$?
        
        docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.version.outputs.version }} > /dev/null 2>&1
        BACKEND_EXISTS=$?
        
        if [ $FRONTEND_EXISTS -eq 0 ] && [ $BACKEND_EXISTS -eq 0 ]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "‚úÖ All images found in registry"
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "‚ùå Images not found in registry"
          exit 1
        fi

  # Job 2: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should-deploy == 'true' && (inputs.environment == 'staging' || inputs.environment == '')
    environment:
      name: staging
      url: https://staging.your-app.com
    
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying version ${{ needs.pre-deploy.outputs.deploy-version }} to staging..."
        
        # Example deployment commands (replace with your actual deployment)
        # kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ needs.pre-deploy.outputs.deploy-version }}
        # kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ needs.pre-deploy.outputs.deploy-version }}
        
        echo "‚úÖ Staging deployment completed!"

    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        sleep 30

    - name: Health check
      run: |
        echo "üîç Running health checks..."
        # curl -f https://staging.your-app.com/health || exit 1
        echo "‚úÖ Health checks passed!"

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests..."
        # Add your smoke tests here
        echo "‚úÖ Smoke tests passed!"

  # Job 3: Integration Tests on Staging
  staging-tests:
    runs-on: ubuntu-latest
    name: Staging Integration Tests
    needs: [pre-deploy, deploy-staging]
    if: needs.deploy-staging.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install test dependencies
      run: npm ci

    - name: Run integration tests against staging
      env:
        TEST_URL: https://staging.your-app.com
      run: |
        echo "üß™ Running integration tests against staging..."
        # npm run test:integration:staging
        echo "‚úÖ Integration tests passed!"

    - name: Run performance tests
      run: |
        echo "‚ö° Running performance tests..."
        # npm run test:performance
        echo "‚úÖ Performance tests passed!"

  # Job 4: Production Deployment (requires approval)
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [pre-deploy, staging-tests]
    if: inputs.environment == 'production' && needs.staging-tests.result == 'success'
    environment:
      name: production
      url: https://your-app.com
    
    steps:
    - name: Create deployment
      uses: chrnorm/deployment-action@v2
      id: deployment
      with:
        token: ${{ github.token }}
        environment: production
        description: 'Production deployment of ${{ needs.pre-deploy.outputs.deploy-version }}'

    - name: Blue-Green Deployment
      run: |
        echo "üîÑ Starting blue-green deployment..."
        
        # Deploy to green environment
        echo "üü¢ Deploying to green environment..."
        # kubectl apply -f k8s/green-deployment.yml
        
        # Wait for green to be ready
        echo "‚è≥ Waiting for green environment..."
        sleep 60
        
        # Health check green
        echo "üîç Health checking green environment..."
        # curl -f https://green.your-app.com/health || exit 1
        
        # Switch traffic to green
        echo "üîÄ Switching traffic to green..."
        # kubectl patch service app-service -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Wait and verify
        sleep 30
        echo "üîç Final health check..."
        # curl -f https://your-app.com/health || exit 1
        
        echo "‚úÖ Blue-green deployment completed!"

    - name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ github.token }}
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}
        state: success
        environment-url: https://your-app.com

    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ github.token }}
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}
        state: failure

  # Job 5: Post-deployment monitoring
  post-deploy:
    runs-on: ubuntu-latest
    name: Post-deployment Monitoring
    needs: [deploy-production]
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success')
    
    steps:
    - name: Setup monitoring
      run: |
        echo "üìä Setting up monitoring alerts..."
        # Configure monitoring dashboards
        # Set up alerts for error rates, response times, etc.
        echo "‚úÖ Monitoring configured!"

    - name: Create release
      if: needs.deploy-production.result == 'success'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this Release
          - Deployed commit: ${{ github.sha }}
          - Environment: Production
          - Deployment time: ${{ github.event.head_commit.timestamp }}
          
          ## Deployment Details
          - Frontend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
          - Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        draft: false
        prerelease: false

  # Job 6: Notifications
  notify:
    runs-on: ubuntu-latest
    name: Send Notifications
    needs: [deploy-staging, deploy-production, post-deploy]
    if: always()
    
    steps:
    - name: Slack notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          Deployment Status: ${{ job.status }}
          Environment: ${{ inputs.environment || 'staging' }}
          Version: ${{ needs.pre-deploy.outputs.deploy-version }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Email notification
      uses: dawidd6/action-send-mail@v3
      if: failure()
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'Deployment Failed: ${{ github.repository }}'
        body: |
          Deployment to ${{ inputs.environment || 'staging' }} failed.
          
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Please check the GitHub Actions logs for more details.
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
