name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality & Security
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          frontend:
            - 'src/**'
            - 'package.json'
            - 'Dockerfile'
          backend:
            - 'backend/**'
          docker:
            - 'docker-compose*.yml'
            - '**/Dockerfile'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Run ESLint
      run: npm run lint -- --format=json --output-file=eslint-report.json
      continue-on-error: true

    - name: Run Prettier check
      run: npm run format:check
      continue-on-error: true

    - name: TypeScript check
      run: |
        npm run type-check
        cd backend && npm run type-check

    - name: Security audit
      run: |
        npm audit --audit-level=high
        cd backend && npm audit --audit-level=high

    - name: Upload ESLint results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: eslint-report.json

  # Job 2: Comprehensive Testing
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: code-quality
    if: ${{ !inputs.skip_tests }}
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false

    - name: Run backend tests
      run: cd backend && npm test -- --coverage --watchAll=false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info,./backend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Job 3: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [code-quality, test]
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Run integration tests
      env:
        MONGODB_URI: mongodb://admin:password123@localhost:27017/test?authSource=admin
        JWT_SECRET: test-secret
      run: |
        cd backend && npm run test:integration

    - name: Run E2E tests
      run: |
        npm run build
        npm run start &
        cd backend && npm run dev &
        sleep 30
        npm run test:e2e

  # Job 4: Build and Push Images
  build:
    runs-on: ubuntu-latest
    name: Build Docker Images
    needs: [code-quality, test, integration-tests]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        target: production
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 5: Performance Testing
  performance:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Job 6: Deploy
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to ${{ inputs.environment || 'staging' }}
    needs: [build, performance]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ inputs.environment || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Deploy application
      id: deploy
      run: |
        echo "üöÄ Deploying to ${{ inputs.environment || 'staging' }}..."
        echo "url=https://your-app-${{ inputs.environment || 'staging' }}.com" >> $GITHUB_OUTPUT
        echo "‚úÖ Deployment completed!"

    - name: Run smoke tests
      run: |
        echo "üîç Running smoke tests..."
        # Add actual smoke tests here
        echo "‚úÖ Smoke tests passed!"

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: 'Deployment to ${{ inputs.environment || "staging" }} ${{ job.status }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
