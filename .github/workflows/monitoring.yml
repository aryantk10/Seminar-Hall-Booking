name: Monitoring & Health Checks

on:
  schedule:
    # Run every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
          - all

jobs:
  health-check:
    runs-on: ubuntu-latest
    name: Health Check
    strategy:
      matrix:
        environment: 
          - ${{ inputs.environment == 'all' && 'staging' || inputs.environment || 'production' }}
          - ${{ inputs.environment == 'all' && 'production' || '' }}
        exclude:
          - environment: ''
    
    steps:
    - name: Health check ${{ matrix.environment }}
      id: health
      run: |
        if [ "${{ matrix.environment }}" == "staging" ]; then
          URL="https://staging.your-app.com"
        else
          URL="https://your-app.com"
        fi
        
        echo "Checking health of $URL..."
        
        # Frontend health check
        FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $URL/health || echo "000")
        
        # Backend API health check
        API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $URL/api/health || echo "000")
        
        # Database connectivity check
        DB_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $URL/api/health/db || echo "000")
        
        echo "frontend_status=$FRONTEND_STATUS" >> $GITHUB_OUTPUT
        echo "api_status=$API_STATUS" >> $GITHUB_OUTPUT
        echo "db_status=$DB_STATUS" >> $GITHUB_OUTPUT
        
        if [ "$FRONTEND_STATUS" == "200" ] && [ "$API_STATUS" == "200" ] && [ "$DB_STATUS" == "200" ]; then
          echo "status=healthy" >> $GITHUB_OUTPUT
          echo "✅ All services healthy"
        else
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          echo "❌ Some services unhealthy"
          echo "Frontend: $FRONTEND_STATUS, API: $API_STATUS, DB: $DB_STATUS"
        fi

    - name: Performance check
      id: performance
      run: |
        if [ "${{ matrix.environment }}" == "staging" ]; then
          URL="https://staging.your-app.com"
        else
          URL="https://your-app.com"
        fi
        
        # Response time check
        RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" $URL || echo "999")
        
        echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
        
        # Check if response time is acceptable (< 2 seconds)
        if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
          echo "performance=good" >> $GITHUB_OUTPUT
          echo "✅ Performance good: ${RESPONSE_TIME}s"
        else
          echo "performance=slow" >> $GITHUB_OUTPUT
          echo "⚠️ Performance slow: ${RESPONSE_TIME}s"
        fi

    - name: SSL certificate check
      id: ssl
      run: |
        if [ "${{ matrix.environment }}" == "staging" ]; then
          DOMAIN="staging.your-app.com"
        else
          DOMAIN="your-app.com"
        fi
        
        # Check SSL certificate expiry
        EXPIRY_DATE=$(echo | openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
        EXPIRY_TIMESTAMP=$(date -d "$EXPIRY_DATE" +%s)
        CURRENT_TIMESTAMP=$(date +%s)
        DAYS_UNTIL_EXPIRY=$(( ($EXPIRY_TIMESTAMP - $CURRENT_TIMESTAMP) / 86400 ))
        
        echo "days_until_expiry=$DAYS_UNTIL_EXPIRY" >> $GITHUB_OUTPUT
        
        if [ $DAYS_UNTIL_EXPIRY -gt 30 ]; then
          echo "ssl_status=good" >> $GITHUB_OUTPUT
          echo "✅ SSL certificate valid for $DAYS_UNTIL_EXPIRY days"
        elif [ $DAYS_UNTIL_EXPIRY -gt 7 ]; then
          echo "ssl_status=warning" >> $GITHUB_OUTPUT
          echo "⚠️ SSL certificate expires in $DAYS_UNTIL_EXPIRY days"
        else
          echo "ssl_status=critical" >> $GITHUB_OUTPUT
          echo "🚨 SSL certificate expires in $DAYS_UNTIL_EXPIRY days"
        fi

    - name: Create incident if unhealthy
      if: steps.health.outputs.status == 'unhealthy'
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Health Check Failed - ${{ matrix.environment }}`,
            body: `
            ## Health Check Failure
            
            **Environment:** ${{ matrix.environment }}
            **Time:** ${new Date().toISOString()}
            
            ### Service Status
            - Frontend: ${{ steps.health.outputs.frontend_status }}
            - API: ${{ steps.health.outputs.api_status }}
            - Database: ${{ steps.health.outputs.db_status }}
            
            ### Performance
            - Response Time: ${{ steps.performance.outputs.response_time }}s
            
            ### SSL Certificate
            - Days until expiry: ${{ steps.ssl.outputs.days_until_expiry }}
            
            **Action Required:** Please investigate and resolve the issues.
            `,
            labels: ['bug', 'health-check', 'priority-high', '${{ matrix.environment }}']
          });
          
          console.log('Created issue:', issue.data.number);

    - name: Send alert notification
      if: steps.health.outputs.status == 'unhealthy' || steps.performance.outputs.performance == 'slow' || steps.ssl.outputs.ssl_status == 'critical'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          🚨 ALERT: ${{ matrix.environment }} environment issues detected!
          
          Health: ${{ steps.health.outputs.status }}
          Performance: ${{ steps.performance.outputs.performance }}
          SSL: ${{ steps.ssl.outputs.ssl_status }}
          
          Response Time: ${{ steps.performance.outputs.response_time }}s
          SSL Expiry: ${{ steps.ssl.outputs.days_until_expiry }} days
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Database monitoring
  database-monitoring:
    runs-on: ubuntu-latest
    name: Database Monitoring
    
    steps:
    - name: MongoDB Atlas monitoring
      run: |
        echo "📊 Checking MongoDB Atlas metrics..."
        
        # Check database connections, performance, storage
        # This would typically use MongoDB Atlas API
        
        echo "✅ Database monitoring completed"

  # Security monitoring
  security-scan:
    runs-on: ubuntu-latest
    name: Security Monitoring
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run dependency vulnerability scan
      run: |
        echo "🔒 Scanning dependencies for vulnerabilities..."
        npm audit --audit-level=high
        cd backend && npm audit --audit-level=high

    - name: Check for secrets in code
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

    - name: OWASP ZAP security scan
      if: github.event_name == 'workflow_dispatch'
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'https://your-app.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Performance monitoring
  performance-monitoring:
    runs-on: ubuntu-latest
    name: Performance Monitoring
    
    steps:
    - name: Lighthouse performance audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://your-app.com
          https://staging.your-app.com
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: Web Vitals check
      run: |
        echo "📈 Checking Core Web Vitals..."
        # Use tools like PageSpeed Insights API
        echo "✅ Web Vitals check completed"

  # Log analysis
  log-analysis:
    runs-on: ubuntu-latest
    name: Log Analysis
    
    steps:
    - name: Analyze application logs
      run: |
        echo "📋 Analyzing application logs..."
        
        # Check for error patterns, unusual activity
        # This would typically connect to your logging service
        
        echo "✅ Log analysis completed"

    - name: Check error rates
      run: |
        echo "📊 Checking error rates..."
        
        # Calculate error rates from logs
        # Alert if error rate exceeds threshold
        
        echo "✅ Error rate check completed"

  # Generate monitoring report
  monitoring-report:
    runs-on: ubuntu-latest
    name: Generate Monitoring Report
    needs: [health-check, database-monitoring, security-scan, performance-monitoring, log-analysis]
    if: always()
    
    steps:
    - name: Generate report
      run: |
        echo "📊 Generating monitoring report..."
        
        # Compile all monitoring results into a report
        # Send to monitoring dashboard or notification system
        
        echo "✅ Monitoring report generated"

    - name: Update status page
      run: |
        echo "📄 Updating status page..."
        
        # Update public status page with current system status
        
        echo "✅ Status page updated"
