name: Build and Push Docker Images

on:
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push images to GitHub Container Registry'
        required: true
        default: true
        type: boolean
      tag:
        description: 'Image tag (default: latest)'
        required: false
        default: 'latest'
        type: string
  release:
    types: [published]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository_owner }}/seminar-hall-booking-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository_owner }}/seminar-hall-booking-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: inputs.push_to_registry == true || github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ inputs.tag || 'latest' }}
          type=semver,pattern={{version}}

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: ${{ inputs.push_to_registry == true || github.event_name == 'release' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ inputs.tag || 'latest' }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_VERSION=18
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        target: production
        push: ${{ inputs.push_to_registry == true || github.event_name == 'release' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ inputs.tag || 'latest' }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_VERSION=18
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ inputs.tag || "latest" }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: Summary
      run: |
        echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ inputs.tag || 'latest' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ inputs.tag || 'latest' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Push to Registry: ${{ inputs.push_to_registry || github.event_name == 'release' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Commit SHA: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
